Write-Host "-Jeff Rudolph 2024-`n"

Write-Host "This script is to be used after the script FindOldUnusedADAccounts.ps1."
Write-Host "The script will take two spreadsheet files, one is the Active Directory student report generated by FindOldUnusedADAccounts.ps1"
Write-Host "The other spreadsheet you will need is an up to date SchoolTool export containing ALL active students with their full email addresses as a column."
Write-Host "This script will compare the unused accounts in active directory with the list of active students to determine which students are no longer in the district."
Write-Host "At the end this script will generate a spreadsheet of all the student accounts that are safe to be disabled by IT staff. If the spreadsheet is empty no accounts were found that need to be disabled.`n"

$ADfilePath = Read-Host "Enter the full filepath of the Active Directory student spreadsheet"
Write-Host " "

$ADspreadSheet = Import-Csv -Path $ADfilepath

#SamAccountName saved in AD is the same as email usernames in our system
$listOfADStudentEmails = $ADspreadSheet.SamAccountName

$schoolToolFilePath = Read-Host "Enter the full filepath of the SchoolTool student spreadsheet (Needs to have columns FirstName, LastName, and Person_Email)"
$schoolToolSpreadSheet = Import-Csv -Path $schoolToolFilePath



#Must sanitize email list for null values (temporary students/homeschool kids never assigned emails)
$schoolToolEmailList = $schoolToolSpreadSheet.Person_Email.Where({$null -ne $_ -and $_ -ne ""})


Write-Host "`n`n"

#make directories if not exist, else wont overwrite

$nullStudentsFolder = New-Item -Path $PSScriptRoot -Name "StudentsWithNoEmailInSchoolTool" -ItemType Directory -Force
$todaysDate = Get-Date -UFormat "%m_%d_%Y_At%H_%M_%S%p"
$nullFilename = Join-Path -Path $nullStudentsFolder -ChildPath "$($todaysDate)-ADStudentsWithoutSchoolToolEmails.csv"
$nullSpreadSheet = Get-Content $schoolToolFilePath | ConvertFrom-Csv | Where-Object {$_.Person_Email -eq "" -or $_.Person_Email -eq $null}


#some students are in AD and SchoolTool, without email addresses in ST. The script if it finds any will generate a spreadsheet with their first and last name for the user to investigate further.
$nullSpreadSheet | ForEach-Object {
    $_ | Add-Member -Type NoteProperty -Name 'FullName' -Value (($_.'LastName' + ", " + $_.'FirstName'))
    }
$ADInactiveNames = $ADspreadSheet.Name
$numberOfNullKidsInAD = (Compare-Object -ReferenceObject $ADspreadSheet.Name -DifferenceObject $nullspreadSheet.FullName -IncludeEqual | Where-Object {$_.SideIndicator -eq "=="}).count

if($numberOfNullKidsInAD -ne 0){
    Write-Host "Some Students (ex. Homeschooled) in our system may not have email addresses in SchoolTool"
    (Compare-Object -ReferenceObject $ADspreadSheet.Name -DifferenceObject $nullspreadSheet.FullName -IncludeEqual | Where-Object {$_.SideIndicator -eq "=="}).InputObject|ForEach-Object {[PSCustomObject]@{FullName=$_}}| Export-Csv -Path $nullFilename  -NoTypeInformation
    Write-Host "`n$numberOfNullKidsInAD Student accounts were found in Active Directory for students that DO NOT have emails listed in SchoolTool. Recommend looking into these students individually to see if they still need to be in our Active Directory and recommend doing this before disabling other accounts.`n"
    Write-Host "List of these students saved here -> $nullFilename `n" 
}



#initializing empty array to strip domain from email addresses to match AD SamAccountName
#done this way as not every email address has the same domain on their email
$schoolToolEmailUsernameList = @()

Foreach($email in $schoolToolEmailList){
$schoolToolEmailUsernameList += $email.Split("@")[0] }

#Generates a list of all the old unused AD accounts that are NOT in SchoolTool
$accountsToDisable = Compare-Object -ReferenceObject $listOfADStudentEmails -DifferenceObject $schoolToolEmailUsernameList | Where-Object {$_.SideIndicator -eq "<="}

$accountsToDisableFolder = New-Item -Path $PSScriptRoot -Name "StudentAccountsToDisable" -ItemType Directory -Force
$accountsToDisableFilename = Join-Path -Path $accountsToDisableFolder -ChildPath "$todaysDate-AccountsToDisable.csv"
$accountsToDisable.InputObject | ForEach-Object {[PSCustomObject]@{SamAccountName=$_}} | Export-Csv -Path $accountsToDisableFilename -NoTypeInformation

Write-Host "`nFile of inactive Active Directory student accounts ready to be disabled saved here -> $accountsToDisableFilename " 


Write-Host "`nScript Finished - Press any key to exit..."
$Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")